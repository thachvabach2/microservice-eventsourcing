services:
  configserver:
    build:
      context: .
      dockerfile: configserver/Dockerfile
    image: "${DOCKER_USERNAME}/configserver:latest"
    ports:
      - 8888:8888
    environment:
      - GIT_KEY=${GIT_KEY}
    networks:
      - microservice-networks
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 2
      start_period: 60s
  discoverserver:
    build:
      context: .
      dockerfile: discoverserver/Dockerfile
    image: "${DOCKER_USERNAME}/discoverserver:latest"
    ports:
      - 8761:8761
    depends_on:
      configserver:
        condition: service_healthy
    networks:
      - microservice-networks
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 2
      start_period: 60s
  bookservice:
    build:
      context: .
      dockerfile: bookservice/Dockerfile
    ports:
      - 9002:9002
    networks:
      - microservice-networks
    depends_on:
      discoverserver:
        condition: service_healthy
      axonserver:
        condition: service_healthy
      configserver:
        condition: service_healthy
    environment:
      - AXONIQ_AXONSERVER_SERVERS=axonserver:8024
      - SPRING_CLOUD_CONFIG_URI=http://configserver:8888
      - EUREKA_URL=http://discoverserver:8761/eureka/
  redis:
    image: redis:latest
    restart: always
    hostname: redis
    ports:
      - 6379:6379
    networks:
      - microservice-networks
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 5
      start_period: 5s
  apigateway:
    build:
      context: .
      dockerfile: apigateway/Dockerfile
    ports:
      - 8081:8081
    depends_on:
      configserver:
        condition: service_healthy
      discoverserver:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - microservice-networks
    environment:
      - EUREKA_HOSTNAME=discoverserver
      - EUREKA_URL=http://discoverserver:8761/eureka/
      - REDIS_HOST=redis
      - REDIS_PORT=6379
  notificationservice:
    build:
      context: .
      dockerfile: notificationservice/Dockerfile
    ports:
      - 9004:9004
    networks:
      - microservice-networks
    depends_on:
      configserver:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      broker:
        condition: service_healthy
      axonserver:
        condition: service_healthy
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://configserver:8888
      - KAFKA_BOOTSTRAP_SERVERS=broker:9092
      - AXON_AXONSERVER_SERVERS=axonserver:8124
      - AXONIQ_AXONSERVER_SERVERS=axonserver:8024
  axonserver:
    image: "axoniq/axonserver:latest"
    hostname: axonserver
    container_name: axonserver
    environment:
      - AXONIQ_AXONSERVER_STANDALONE=TRUE
    ports:
      - 8024:8024
      - 8124:8124
      - 8224:8224
    networks:
      - microservice-networks
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8024/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD-SHELL", "echo ruok | nc localhost 2181" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - microservice-networks
  broker:
    image: confluentinc/cp-server:7.7.0
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - 9092:9092
      - 9101:9101
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://broker:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: "true"
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    networks:
      - microservice-networks
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.7.0
    hostname: control-center
    container_name: control-center
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - 9021:9021
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "broker:29092"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    networks:
      - microservice-networks

networks:
  microservice-networks:
    driver: bridge
